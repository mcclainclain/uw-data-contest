}
# If we don't find a column with "Hometown" in it, likely this url doesn't contain any data. We move on to the next year/sport.
if (!("Hometown" %in% colnames(roster))) {
next
}
# Get the columns we want from the roster, and add them to the overall college dataframe.
roster = roster %>% select(Name, Hometown, Year, Sport)
college_df = rbind(college_df, roster)
}
# For monitoring purposes
# print(paste("Finished with ", sport))
}
# Typically, csv files are written for each school, so we can combine them in the cleaning. I will not do that here, but instead show a snapshot of the dataframe.
# write.csv(college_df, "MIZZOU.csv", row.names=F)
head(college_df)
knitr::opts_chunk$set(echo=T,eval=T,message=F,warning=F,fig.align='center')
library(tidyverse)
library(rvest)
library(kableExtra)
show_table = function(df, caption="") {
return (df %>% kbl(caption = caption) %>% kable_classic_2(bootstrap_options = c("striped", "hover"), full_width = F, font_size=20, html_font="Cambria"))
}
show_table(head(read_csv("./Missouri/mizzou.csv")))
# Get all files from this directory
files = list.files(recursive=T)
# Get all .csv files, this will remove the .R scripts
csv_files = files[endsWith(files, ".csv")]
all_schools = data.frame()
for (f in csv_files) {
file = read_csv(f)
file$School = rep(str_split_1(f, "/")[1], nrow(file))
all_schools = rbind(all_schools, file)
}
show_table(head(all_schools))
show_table(tail(all_schools))
# Scraping data for the University of Missouri's rosters for all sports in 2023
# The sports that the school offers
sports = c("baseball",
"softball",
"mens-basketball",
"womens-basketball",
"cross-country",
"football",
"mens-golf",
"womens-golf",
"mens-swimming-and-diving",
"womens-swimming-and-diving",
"womens-gymnastics",
"womens-soccer",
"track-and-field",
"wrestling",
"womens-tennis",
"womens-volleyball")
# "Type" is just determining what the format of the year is. If the sport's urls are formatted as 2023, 2024, etc, its type is 0. If it is formatted like 2023-24, it is 1.
types = c(0,0,1,1,0,0,1,1,0,0,0,0,0,1,1,0)
sports_df = data.frame(Sport = sports, Type = types) # DataFrame combining sports with their types'
# This is a helper function taking in a column that has Hometown data. Some of the columns are presented as "Hometown/High School"; we only want Hometown, so we can split on the "/" character, and take the first element.
hometown_split = function(L) {
new_list = c()
for (i in 1:length(L)) {
new_list = c(new_list, str_trim(str_split_1(L[i], "/")[1]))
}
return (new_list)
}
# Scraping
BASE_URL = "https://mutigers.com"
years = 2023:2023 # List of years that we want to look at. Normally this would be something like 2013:2023.
college_df = data.frame() # Initializing an empty dataframe that we can add to.
for (i in 1:nrow(sports_df)) {
sport = sports_df$Sport[i] # Easier for readability
for (y in 1:length(years)) {
year = years[y] # Easier for readability
# If the sport's url is presented as 2023-24 (type 1), we want to convert the year in our for loop to be of that format.
if (sports_df$Type[i] == 1) {
next_year = as.character(years[y] + 1)
year_str = paste(years[y], "-", substr(next_year, nchar(next_year) -1, nchar(next_year)), sep="")
}
else { # otherwise, keep year as is.
year_str = as.character(years[y])
}
# Put together the pieces of the url
url = paste(BASE_URL, "/sports/", sport, "/roster/", year_str, sep="")
# Read the data.
tables = read_html(url) %>% html_table()
# Which element of the tables list the roster is on depends on the school.
roster = data.frame(tables[3])
# Some sports have men's and women's rosters combined in two different tables. This adds that extra table in.
if (sport %in% c("cross-country", "track-and-field")) {
roster = rbind(roster, data.frame(tables[4]))
}
# Adding a column for the year and the sport
roster$Year = rep(year, nrow(roster))
roster$Sport = rep(sport, nrow(roster))
# This checks if there is a column including the name "hometown". If there is one, it adds a Hometown column, using the hometown_split() function.
for (i in 1:length(colnames(roster))){
if (length(grep("[hH]ometown", colnames(roster)[i])) > 0){
roster$Hometown = hometown_split(roster[[colnames(roster)[i]]])
}
# If there is a column "Name", add it to the roster dataframe.
if (length(grep("[nN]ame", colnames(roster)[i])) > 0){
roster$Name = roster[[colnames(roster)[i]]]
}
}
# If we don't find a column with "Hometown" in it, likely this url doesn't contain any data. We move on to the next year/sport.
if (!("Hometown" %in% colnames(roster))) {
next
}
# Get the columns we want from the roster, and add them to the overall college dataframe.
roster = roster %>% select(Name, Hometown, Year, Sport)
college_df = rbind(college_df, roster)
}
# For monitoring purposes
# print(paste("Finished with ", sport))
}
# Typically, csv files are written for each school, so we can combine them in the cleaning. I will not do that here, but instead show a snapshot of the dataframe.
# write.csv(college_df, "MIZZOU.csv", row.names=F)
install.packages("caret")
View(all_schools)
all_schools$Sport
sport_names = all_schools$Sport
sport_names
sport_names = all_schools$Sport
for (sport in sport_names) {
print(sport)
}
sport_names = all_schools$Sport
unique(sport_names)
names = unique(sport_names)
name_replacements = c("baseball", "softball", "mens-basketball", "womens-basketball", "football", "mens-golf", "womens-golf", "swimming-and-diving", "gymnastics", "womens-soccer", "xc-track", "womens-tennis", "mens-tennis", "volleyball", "womens-rowing", "baseball", "softball", "mens-basketball", "womens-basketball", "football", "mens-golf", "womens-golf", "swimming-and-diving", "gymnastics", "womens-soccer", "xc-track", "xc-track", "xc-track", "xc-track", "womens-tennis", "mens-tennis", "volleyball", "xc-track", "swimming-and-diving", "swimming-and-diving", "xc-track", "womens-lacrosse", "mens-basketball", "womens-basketball", "xc-track", "mens-golf", "womens-golf", "swimming-and-diving", "gymnastics", "mens-soccer", "womens-soccer", "xc-track", "mens-tennis", "womens-tennis", "volleyball", "baseball", "softball", "mens-basketball", "xc-track", "football", "mens-golf", "womens-golf", "swimming-and-diving", "gymnastics", "womens-soccer", "xc-track", "mens-tennis", "womens-tennis", "volleyball", "beach-volleyball", "wrestling", "xc-track", "xc-track", "swimming-and-diving", "xc-track", "womens-lacrosse")
length(name_replacements) == length(names)
names = unique(sport_names)
name_replacements = c("baseball", "softball", "mens-basketball", "womens-basketball", "football", "mens-golf", "womens-golf", "swimming-and-diving", "gymnastics", "womens-soccer", "xc-track", "womens-tennis", "mens-tennis", "volleyball", "womens-rowing", "baseball", "softball", "mens-basketball", "womens-basketball", "football", "mens-golf", "womens-golf", "swimming-and-diving", "gymnastics", "womens-soccer", "xc-track", "xc-track", "xc-track", "xc-track", "womens-tennis", "mens-tennis", "volleyball", "xc-track", "swimming-and-diving", "swimming-and-diving", "xc-track", "womens-lacrosse", "mens-basketball", "womens-basketball", "xc-track", "mens-golf", "womens-golf", "swimming-and-diving", "gymnastics", "mens-soccer", "womens-soccer", "xc-track", "mens-tennis", "womens-tennis", "volleyball", "baseball", "softball", "mens-basketball", "xc-track", "football", "mens-golf", "womens-golf", "swimming-and-diving", "gymnastics", "womens-soccer", "xc-track", "mens-tennis", "womens-tennis", "volleyball", "beach-volleyball", "wrestling", "xc-track", "xc-track", "swimming-and-diving", "xc-track", "womens-lacrosse")
sport_name_changes = data.frame(Name = names, Modified = name_replacements)
View(sport_name_changes)
names = unique(sport_names)
name_replacements = c("baseball", "softball", "mens-basketball", "womens-basketball", "football", "mens-golf", "womens-golf", "swimming-and-diving", "gymnastics", "womens-soccer", "xc-track", "womens-tennis", "mens-tennis", "volleyball", "womens-rowing", "baseball", "softball", "mens-basketball", "womens-basketball", "football", "mens-golf", "womens-golf", "swimming-and-diving", "gymnastics", "womens-soccer", "xc-track", "xc-track", "xc-track", "xc-track", "womens-tennis", "mens-tennis", "volleyball", "xc-track", "swimming-and-diving", "swimming-and-diving", "xc-track", "womens-lacrosse", "mens-basketball", "womens-basketball", "xc-track", "mens-golf", "womens-golf", "swimming-and-diving", "gymnastics", "mens-soccer", "womens-soccer", "xc-track", "mens-tennis", "womens-tennis", "volleyball", "baseball", "softball", "mens-basketball", "xc-track", "football", "mens-golf", "womens-golf", "swimming-and-diving", "gymnastics", "womens-soccer", "xc-track", "mens-tennis", "womens-tennis", "volleyball", "beach-volleyball", "wrestling", "xc-track", "xc-track", "swimming-and-diving", "xc-track", "womens-lacrosse")
sport_name_changes = data.frame(Name = names, Modified = name_replacements)
show_table(sport_name_changes)
sport_name_changes[sport_name_changes["Name"] == "w-swim"]
sport_name_changes[sport_name_changes["Name"] == "w-swim"]$Modified
sport_name_changes[sport_name_changes["Name"] == "w-swim"]
sport_name_changes[sport_name_changes["Name"] == "w-swim"][2]
# Apply this to the all_sports sport list
new_sports = c()
for (sport in all_sports$Sport){
new_sports = c(new_sports, sport_name_changes[sport_name_changes["Name"] == sport][2])
}
# Apply this to the all_sports sport list
new_sports = c()
for (sport in all_schools$Sport){
new_sports = c(new_sports, sport_name_changes[sport_name_changes["Name"] == sport][2])
}
all_schools$Sport = new_sports
View(all_schools)
# Apply this to the all_sports sport list
new_sports = c()
for (sport in all_schools$Sport){
new_sports = c(new_sports, sport_name_changes[sport_name_changes["Name"] == sport][2])
}
all_schools$Sport = new_sports
tibble(c(length(names), length(unique(new_sports)))
# Apply this to the all_sports sport list
new_sports = c()
for (sport in all_schools$Sport){
new_sports = c(new_sports, sport_name_changes[sport_name_changes["Name"] == sport][2])
}
all_schools$Sport = new_sports
print(paste("Old number of names:", length(names), "New number of names", length(unique(new_sports))))
# Apply this to the all_sports sport list
new_sports = c()
for (sport in all_schools$Sport){
new_sports = c(new_sports, sport_name_changes[sport_name_changes["Name"] == sport][2])
}
all_schools$Sport = new_sports
print(paste("Old number of names:", length(names), "New number of names", length(unique(new_sports))))
knitr::opts_chunk$set(echo=T,eval=T,message=F,warning=F,fig.align='center')
library(tidyverse)
library(rvest)
library(kableExtra)
show_table = function(df, caption="") {
return (df %>% kbl(caption = caption) %>% kable_classic_2(bootstrap_options = c("striped", "hover"), full_width = F, font_size=20, html_font="Cambria"))
}
show_table(head(read_csv("./Missouri/mizzou.csv")))
# Get all files from this directory
files = list.files(recursive=T)
# Get all .csv files, this will remove the .R scripts
csv_files = files[endsWith(files, ".csv")]
all_schools = data.frame()
for (f in csv_files) {
file = read_csv(f)
file$School = rep(str_split_1(f, "/")[1], nrow(file))
all_schools = rbind(all_schools, file)
}
show_table(head(all_schools))
show_table(tail(all_schools))
sport_names = all_schools$Sport
unique(sport_names)
names = unique(sport_names)
name_replacements = c("baseball", "softball", "mens-basketball", "womens-basketball", "football", "mens-golf", "womens-golf", "swimming-and-diving", "gymnastics", "womens-soccer", "xc-track", "womens-tennis", "mens-tennis", "volleyball", "womens-rowing", "baseball", "softball", "mens-basketball", "womens-basketball", "football", "mens-golf", "womens-golf", "swimming-and-diving", "gymnastics", "womens-soccer", "xc-track", "xc-track", "xc-track", "xc-track", "womens-tennis", "mens-tennis", "volleyball", "xc-track", "swimming-and-diving", "swimming-and-diving", "xc-track", "womens-lacrosse", "mens-basketball", "womens-basketball", "xc-track", "mens-golf", "womens-golf", "swimming-and-diving", "gymnastics", "mens-soccer", "womens-soccer", "xc-track", "mens-tennis", "womens-tennis", "volleyball", "baseball", "softball", "mens-basketball", "xc-track", "football", "mens-golf", "womens-golf", "swimming-and-diving", "gymnastics", "womens-soccer", "xc-track", "mens-tennis", "womens-tennis", "volleyball", "beach-volleyball", "wrestling", "xc-track", "xc-track", "swimming-and-diving", "xc-track", "womens-lacrosse")
sport_name_changes = data.frame(Name = names, Modified = name_replacements)
show_table(tail(sport_name_changes))
# Apply this to the all_sports sport list
new_sports = c()
for (sport in all_schools$Sport){
new_sports = c(new_sports, sport_name_changes[sport_name_changes["Name"] == sport][2])
}
all_schools$Sport = new_sports
print(paste("Old number of names:", length(names), "New number of names", length(unique(new_sports))))
setwd("C:/Users/matth/Personal/projects/current/uw-data-contest")
cities = players$Hometown
library(tidyverse)
library(ggmap)
players = read_csv("rosters.csv")
readRenviron("./.Renviron")
register_google(Sys.getenv("MAPSAPIKEY"))
cities = players$Hometown
cities
length(distinct(cities))
length(unique(cities))
cities = data.frame(players$Hometown)
cities
cities = data.frame(unique(players$Hometown))
cities
geocoded_cities = mutate_geocode(cities, Hometown)
head(cities)
cities$Hometown = cities$unique.players.Hometown.
cities
source("C:/Users/matth/Personal/projects/current/uw-data-contest/geocodes.R", echo=TRUE)
View(cities)
length(cities
)
nrow(cities)
na.omit(cities)
cities = na.omit(cities)
nrow(cities)
library(tidyverse)
library(ggmap)
players = read_csv("rosters.csv")
readRenviron("./.Renviron")
register_google(Sys.getenv("MAPSAPIKEY"))
cities = data.frame(unique(players$Hometown))
cities$Hometown = cities$unique.players.Hometown.
cities = cities %>% select(Hometown)
cities = drop_na(cities)
library(tidyverse)
library(ggmap)
players = read_csv("rosters.csv")
readRenviron("./.Renviron")
register_google(Sys.getenv("MAPSAPIKEY"))
cities = data.frame(unique(players$Hometown))
cities$Hometown = cities$unique.players.Hometown.
cities = cities %>% select(Hometown)
cities = drop_na(cities)
library(tidyverse)
library(ggmap)
players = read_csv("rosters.csv")
readRenviron("./.Renviron")
register_google(Sys.getenv("MAPSAPIKEY"))
cities = data.frame(unique(players$Hometown))
cities$Hometown = cities$unique.players.Hometown.
cities = cities %>% select(Hometown) %>% drop_na()
source("C:/Users/matth/Personal/projects/current/uw-data-contest/geocodes.R", echo=TRUE)
write_csv(distinct(geocoded_cities %>% select(Hometown, lon, lat)), "./geocodes.csv")
View(geocoded_cities)
getwd()
knitr::opts_chunk$set(echo=T,eval=T,message=F,warning=F,fig.align='center')
library(tidyverse)
library(rvest)
library(kableExtra)
# Get all files from this directory
files = list.files(recursive=T)
# Get all .csv files, this will remove the .R scripts
csv_files = files[endsWith(files, ".csv")]
all_schools = data.frame()
for (f in csv_files) {
file = read_csv(f)
file$School = rep(str_split_1(f, "/")[1], nrow(file))
all_schools = rbind(all_schools, file)
}
csv_files
csv_files[!("geocodes.csv")]
csv_files[!(csv_files %in% c("geocodes.csv", "rosters.csv"))]
geocodes = read_csv("geocodes.csv")
head(geocodes)
geocodes = read_csv("geocodes.csv")
show_table(head(geocodes))
knitr::opts_chunk$set(echo=T,eval=T,message=F,warning=F,fig.align='center')
library(tidyverse)
library(sqldf)
library(lemon)
library(kableExtra)
library(ggmap)
library(leaflet)
library(leaflet.providers)
library(glue)
library(geosphere)
show_table = function(df, caption="") {
return (df %>% kbl(caption = caption) %>% kable_classic_2(bootstrap_options = c("striped", "hover"), full_width = F, font_size=20, html_font="Cambria"))
}
players_raw = read_csv("players.csv")
player_years = sqldf("SELECT Name, MIN(YEAR) AS FirstYear, MAX(YEAR) AS LastYear FROM players_raw GROUP BY Name")
players = sqldf("SELECT DISTINCT players_raw.Name, players_raw.Pos, players_raw.Hometown, player_years.FirstYear as FirstYear, player_years.LastYear as LastYear FROM players_raw LEFT JOIN player_years ON players_raw.Name=player_years.Name")
players %>%
filter(Name == "Riley Nowakowski") %>%
show_table()
agg = aggregate(Pos~Name, players, FUN=c)
towns = c()
firstyears = c()
lastyears = c()
for (i in 1:length(agg$Name)) {
player = head(players[players$Name == agg$Name[i],], 1)
towns = append(towns, player$Hometown[1])
firstyears = append(firstyears, player$FirstYear[1])
lastyears = append(lastyears, player$LastYear[1])
}
players_no_dup = agg %>%
mutate(Hometown = towns, FirstYear = firstyears, LastYear = lastyears)
# Individual town adjustment
players_no_dup$Hometown[players_no_dup$Hometown == "Montreal, Wis."] = "Montreal, Wisconsin"
players_no_dup$Hometown[players_no_dup$Hometown == "Howard, Kan."] = "Howard, Kansas"
players_w_mult_pos = (nrow(players)-nrow(players_no_dup))/nrow(players) * 100
tibble("Pos. Not Combined" = nrow(players), "Pos. Combined" = nrow(players_no_dup), "% of Multiple Position" = round(players_w_mult_pos, 2)) %>%
show_table("Length of Players DF")
readRenviron("./.Renviron")
register_google(Sys.getenv("MAPSAPIKEY"))
geocodes = read_csv("geocodes.csv")
print_players = function(df) {
string = ""
if (is.na(df) || nrow(df) == 0){
return (NA)
}
for (i in 1:nrow(df)){
row = df[i,]
player = ifelse(row$FirstYear == row$LastYear, glue('{row$Name}, {row$FirstYear}'), glue('{row$Name}, {row$FirstYear}-{row$LastYear}'))
string = paste(string, player, "<br>")
}
return (string)
}
town_players = c()
for (town in geocodes$Hometown) {
town_players = append(town_players, list(players_no_dup[players_no_dup["Hometown"] == town,]))
}
geocodes$Players = town_players
m = leaflet() %>%
addProviderTiles(provider=providers$Esri.WorldGrayCanvas) %>%
addCircleMarkers(geocodes$lon, geocodes$lat, popup=paste("<b>", geocodes$Hometown, "</b><br>", lapply(geocodes$Players, print_players)), label=geocodes$Hometown, radius=4.5, color="#C5050C", fillOpacity=1.0, stroke=FALSE)
town_players = c()
for (town in geocodes$Hometown) {
town_players = append(town_players, list(players_no_dup[players_no_dup["Hometown"] == town,]))
}
geocodes$Players = town_players
m = leaflet() %>%
addProviderTiles(provider=providers$Esri.WorldGrayCanvas) %>%
addCircleMarkers(geocodes$lon, geocodes$lat, popup=paste("<b>", geocodes$Hometown, "</b><br>", lapply(geocodes$Players, print_players)), label=geocodes$Hometown, radius=4.5, color="#C5050C", fillOpacity=1.0, stroke=FALSE)
knitr::opts_chunk$set(echo=T,eval=T,message=F,warning=F,fig.align='center')
library(tidyverse)
library(rvest)
library(kableExtra)
library(leaflet)
library(leaflet.providers)
library(ggmap)
geocodes = read_csv("geocodes.csv")
show_table(head(geocodes))
town_players = c()
for (town in geocodes$Hometown) {
town_players = append(town_players, list(all_schools[all_schools["Hometown"] == town,]))
}
geocodes$Players = town_players
View(geocodes)
View(geocodes[[4]][[1]])
town_players = c()
for (town in geocodes$Hometown) {
town_players = append(town_players, nrow(list(all_schools[all_schools["Hometown"] == town,])))
}
geocodes$Players = town_players
View(geocodes)
town_players = c()
for (town in geocodes$Hometown) {
town_players = append(town_players, length(list(all_schools[all_schools["Hometown"] == town,])))
}
geocodes$Players = town_players
View(geocodes)
town_players = c()
for (town in geocodes$Hometown) {
town_players = append(town_players, drop_na(list(all_schools[all_schools["Hometown"] == town,])))
}
town_players = c()
for (town in geocodes$Hometown) {
players = drop_na(data.frame(all_schools[all_schools["Hometown"] == town,]))
town_players = append(town_players, players)
}
geocodes$Players = town_players
View(geocodes)
all_schools[all_schools["Hometown"] == "Birmingham, Al."]
View(all_schools)
all_schools[all_schools["Hometown"] == "Birmingham, Ala."]
View(agg)
View(all_schools)
# Get all files from this directory
files = list.files(recursive=T)
# Get all .csv files, this will remove the .R scripts
csv_files = files[endsWith(files, ".csv")]
csv_files = csv_files[!(csv_files %in% c("geocodes.csv", "rosters.csv"))]
all_schools = data.frame()
for (f in csv_files) {
file = read_csv(f)
file$School = rep(str_split_1(f, "/")[1], nrow(file))
all_schools = rbind(all_schools, file)
}
show_table(head(all_schools))
show_table(tail(all_schools))
sport_names = all_schools$Sport
unique(sport_names)
names = unique(sport_names)
name_replacements = c("baseball", "softball", "mens-basketball", "womens-basketball", "football", "mens-golf", "womens-golf", "swimming-and-diving", "gymnastics", "womens-soccer", "xc-track", "womens-tennis", "mens-tennis", "volleyball", "womens-rowing", "baseball", "softball", "mens-basketball", "womens-basketball", "football", "mens-golf", "womens-golf", "swimming-and-diving", "gymnastics", "womens-soccer", "xc-track", "xc-track", "xc-track", "xc-track", "womens-tennis", "mens-tennis", "volleyball", "xc-track", "swimming-and-diving", "swimming-and-diving", "xc-track", "womens-lacrosse", "mens-basketball", "womens-basketball", "xc-track", "mens-golf", "womens-golf", "swimming-and-diving", "gymnastics", "mens-soccer", "womens-soccer", "xc-track", "mens-tennis", "womens-tennis", "volleyball", "baseball", "softball", "mens-basketball", "xc-track", "football", "mens-golf", "womens-golf", "swimming-and-diving", "gymnastics", "womens-soccer", "xc-track", "mens-tennis", "womens-tennis", "volleyball", "beach-volleyball", "wrestling", "xc-track", "xc-track", "swimming-and-diving", "xc-track", "womens-lacrosse")
sport_name_changes = data.frame(Name = names, Modified = name_replacements)
show_table(tail(sport_name_changes))
# Apply this to the all_sports sport list
new_sports = c()
for (sport in all_schools$Sport){
new_sports = c(new_sports, sport_name_changes[sport_name_changes["Name"] == sport][2])
}
all_schools$Sport = new_sports
# Write this to a csv to use for geocoding
write.csv(all_schools, "rosters.csv", row.names=F)
print(paste("Old number of names:", length(names), "New number of names", length(unique(new_sports))))
geocodes = read_csv("geocodes.csv")
show_table(head(geocodes))
knitr::opts_chunk$set(echo=T,eval=T,message=F,warning=F,fig.align='center')
library(tidyverse)
library(rvest)
library(kableExtra)
library(leaflet)
library(leaflet.providers)
library(ggmap)
show_table = function(df, caption="") {
return (df %>% kbl(caption = caption) %>% kable_classic_2(bootstrap_options = c("striped", "hover"), full_width = F, font_size=20, html_font="Cambria"))
}
show_table(head(read_csv("./Missouri/mizzou.csv")))
# Get all files from this directory
files = list.files(recursive=T)
# Get all .csv files, this will remove the .R scripts
csv_files = files[endsWith(files, ".csv")]
csv_files = csv_files[!(csv_files %in% c("geocodes.csv", "rosters.csv"))]
all_schools = data.frame()
for (f in csv_files) {
file = read_csv(f)
file$School = rep(str_split_1(f, "/")[1], nrow(file))
all_schools = rbind(all_schools, file)
}
show_table(head(all_schools))
show_table(tail(all_schools))
sport_names = all_schools$Sport
unique(sport_names)
names = unique(sport_names)
name_replacements = c("baseball", "softball", "mens-basketball", "womens-basketball", "football", "mens-golf", "womens-golf", "swimming-and-diving", "gymnastics", "womens-soccer", "xc-track", "womens-tennis", "mens-tennis", "volleyball", "womens-rowing", "baseball", "softball", "mens-basketball", "womens-basketball", "football", "mens-golf", "womens-golf", "swimming-and-diving", "gymnastics", "womens-soccer", "xc-track", "xc-track", "xc-track", "xc-track", "womens-tennis", "mens-tennis", "volleyball", "xc-track", "swimming-and-diving", "swimming-and-diving", "xc-track", "womens-lacrosse", "mens-basketball", "womens-basketball", "xc-track", "mens-golf", "womens-golf", "swimming-and-diving", "gymnastics", "mens-soccer", "womens-soccer", "xc-track", "mens-tennis", "womens-tennis", "volleyball", "baseball", "softball", "mens-basketball", "xc-track", "football", "mens-golf", "womens-golf", "swimming-and-diving", "gymnastics", "womens-soccer", "xc-track", "mens-tennis", "womens-tennis", "volleyball", "beach-volleyball", "wrestling", "xc-track", "xc-track", "swimming-and-diving", "xc-track", "womens-lacrosse")
sport_name_changes = data.frame(Name = names, Modified = name_replacements)
show_table(tail(sport_name_changes))
# Apply this to the all_sports sport list
new_sports = c()
for (sport in all_schools$Sport){
new_sports = c(new_sports, sport_name_changes[sport_name_changes["Name"] == sport][2])
}
all_schools$Sport = new_sports
# Write this to a csv to use for geocoding
write.csv(all_schools, "rosters.csv", row.names=F)
print(paste("Old number of names:", length(names), "New number of names", length(unique(new_sports))))
geocodes = read_csv("geocodes.csv")
show_table(head(geocodes))
town_players = c()
for (town in geocodes$Hometown) {
players = drop_na(data.frame(all_schools[all_schools["Hometown"] == town,]))
town_players = append(town_players, players)
}
geocodes$Players = town_players
town_players
data.frame(all_schools[all_schools["Hometown"] == "Birmingham, Ala."])
data.frame(all_schools[all_schools["Hometown"] == "Birmingham, Ala.",])
test = data.frame(all_schools[all_schools["Hometown"] == "Birmingham, Ala.",])
test %>% count(School)
test %>% count(School) %>% arrange("desc")
test %>% count(School) %>% arrange(desc())
test %>% count(School) %>% arrange(desc(n))
test %>% count(School) %>% arrange(desc(n)) %>% top_n(5)
test %>% drop_na %>% count(School) %>% arrange(desc(n)) %>% top_n(5)
test %>% drop_na %>% count(School) %>% arrange(desc(n)) %>% top_n(5)
test %>% drop_na %>% count(School) %>% arrange(desc(n)) %>% top_n(4)
test %>% drop_na %>% count(School) %>% arrange(desc(n)) %>% top_n(5)
town_players = c()
for (town in geocodes$Hometown) {
players = data.frame(all_schools[all_schools["Hometown"] == town,]) %>% drop_na()
town_players = append(town_players, players %>% count(School) %>% arrange(desc(n)) %>% top_n(5))
}
geocodes$Players = town_players
town_players = c()
for (town in geocodes$Hometown) {
town_players = append(town_players, list(all_schools[all_schools["Hometown"] == town,])))
town_players = c()
for (town in geocodes$Hometown) {
town_players = append(town_players, list(all_schools[all_schools["Hometown"] == town,])))
town_players = c()
for (town in geocodes$Hometown) {
town_players = append(town_players, list(all_schools[all_schools["Hometown"] == town,])))
town_players = c()
for (town in geocodes$Hometown) {
town_players = append(town_players, list(all_schools[all_schools["Hometown"] == town,]))
}
geocodes$Players = town_players
View(geocodes)
View(geocodes[[4]][[1]])
View(geocodes)
View(geocodes[[4]][[1]])
